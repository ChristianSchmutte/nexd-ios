//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift


open class UserAPI {
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userControllerFindOne(_id: BigDecimal, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userControllerFindOneWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - parameter _id: (path)  
     - returns: Observable<Void>
     */
    open class func userControllerFindOne(_id: BigDecimal) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            userControllerFindOne(_id: _id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /api/user/{id}
     - 

     - :
       - type: http
       - name: bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func userControllerFindOneWithRequestBuilder(_id: BigDecimal) -> RequestBuilder<Void> {
        var path = "/api/user/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userControllerGetAll(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userControllerGetAllWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - returns: Observable<Void>
     */
    open class func userControllerGetAll() -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            userControllerGetAll() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /api/user
     - 

     - :
       - type: http
       - name: bearer

     - returns: RequestBuilder<Void> 
     */
    open class func userControllerGetAllWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/user"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter body: (body)  
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userControllerUpdate(body: UpdateUserDto, _id: BigDecimal, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userControllerUpdateWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - parameter body: (body)  
     - parameter _id: (path)  
     - returns: Observable<Void>
     */
    open class func userControllerUpdate(body: UpdateUserDto, _id: BigDecimal) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            userControllerUpdate(body: body, _id: _id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - PUT /api/user/{id}
     - 

     - :
       - type: http
       - name: bearer
     - parameter body: (body)  
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func userControllerUpdateWithRequestBuilder(body: UpdateUserDto, _id: BigDecimal) -> RequestBuilder<Void> {
        var path = "/api/user/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
