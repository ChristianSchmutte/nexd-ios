//
// CallsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import RxSwift



open class CallsAPI {
    /**
     Returns all calls with the given parameters
     
     - parameter callQueryDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<[Call]>
     */
    open class func callsControllerCalls(callQueryDto: CallQueryDto, apiResponseQueue: DispatchQueue = NexdClientAPI.apiResponseQueue) -> Observable<[Call]> {
        return Observable.create { observer -> Disposable in
            callsControllerCallsWithRequestBuilder(callQueryDto: callQueryDto).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Returns all calls with the given parameters
     - GET /call/calls
     - parameter callQueryDto: (body)  
     - returns: RequestBuilder<[Call]> 
     */
    open class func callsControllerCallsWithRequestBuilder(callQueryDto: CallQueryDto) -> RequestBuilder<[Call]> {
        let path = "/call/calls"
        let URLString = NexdClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: callQueryDto)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Call]>.Type = NexdClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Sets a call as converted to shopping list
     
     - parameter sid: (path) call sid 
     - parameter convertedHelpRequestDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Call>
     */
    open class func callsControllerConverted(sid: String, convertedHelpRequestDto: ConvertedHelpRequestDto, apiResponseQueue: DispatchQueue = NexdClientAPI.apiResponseQueue) -> Observable<Call> {
        return Observable.create { observer -> Disposable in
            callsControllerConvertedWithRequestBuilder(sid: sid, convertedHelpRequestDto: convertedHelpRequestDto).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Sets a call as converted to shopping list
     - PUT /call/calls/{sid}/converted
     - parameter sid: (path) call sid 
     - parameter convertedHelpRequestDto: (body)  
     - returns: RequestBuilder<Call> 
     */
    open class func callsControllerConvertedWithRequestBuilder(sid: String, convertedHelpRequestDto: ConvertedHelpRequestDto) -> RequestBuilder<Call> {
        var path = "/call/calls/{sid}/converted"
        let sidPreEscape = "\(APIHelper.mapValueToPathItem(sid))"
        let sidPostEscape = sidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sid}", with: sidPostEscape, options: .literal, range: nil)
        let URLString = NexdClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: convertedHelpRequestDto)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Call>.Type = NexdClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Redirects the request to the stored record file.
     
     - parameter sid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<URL>
     */
    open class func callsControllerGetCallUrl(sid: String, apiResponseQueue: DispatchQueue = NexdClientAPI.apiResponseQueue) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            callsControllerGetCallUrlWithRequestBuilder(sid: sid).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Redirects the request to the stored record file.
     - GET /call/calls/{sid}/record
     - parameter sid: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func callsControllerGetCallUrlWithRequestBuilder(sid: String) -> RequestBuilder<URL> {
        var path = "/call/calls/{sid}/record"
        let sidPreEscape = "\(APIHelper.mapValueToPathItem(sid))"
        let sidPostEscape = sidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sid}", with: sidPostEscape, options: .literal, range: nil)
        let URLString = NexdClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<URL>.Type = NexdClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns available numbers
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<String>
     */
    open class func callsControllerGetNumber(apiResponseQueue: DispatchQueue = NexdClientAPI.apiResponseQueue) -> Observable<String> {
        return Observable.create { observer -> Disposable in
            callsControllerGetNumberWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Returns available numbers
     - GET /call/number
     - returns: RequestBuilder<String> 
     */
    open class func callsControllerGetNumberWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/call/number"
        let URLString = NexdClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = NexdClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
