//
// ShoppingListAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import RxSwift



open class ShoppingListAPI {
    /**

     - parameter shoppingListId: (path)  
     - parameter requestId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<ShoppingList>
     */
    open class func shoppingListControllerAddRequestToList(shoppingListId: Int, requestId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<ShoppingList> {
        return Observable.create { observer -> Disposable in
            shoppingListControllerAddRequestToListWithRequestBuilder(shoppingListId: shoppingListId, requestId: requestId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     - PUT /api/shopping-list/{shoppingListId}/{requestId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter shoppingListId: (path)  
     - parameter requestId: (path)  
     - returns: RequestBuilder<ShoppingList> 
     */
    open class func shoppingListControllerAddRequestToListWithRequestBuilder(shoppingListId: Int, requestId: Int) -> RequestBuilder<ShoppingList> {
        var path = "/api/shopping-list/{shoppingListId}/{requestId}"
        let shoppingListIdPreEscape = "\(APIHelper.mapValueToPathItem(shoppingListId))"
        let shoppingListIdPostEscape = shoppingListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{shoppingListId}", with: shoppingListIdPostEscape, options: .literal, range: nil)
        let requestIdPreEscape = "\(APIHelper.mapValueToPathItem(requestId))"
        let requestIdPostEscape = requestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{requestId}", with: requestIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ShoppingList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter shoppingListId: (path)  
     - parameter requestId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<ShoppingList>
     */
    open class func shoppingListControllerDeleteRequestFromList(shoppingListId: Int, requestId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<ShoppingList> {
        return Observable.create { observer -> Disposable in
            shoppingListControllerDeleteRequestFromListWithRequestBuilder(shoppingListId: shoppingListId, requestId: requestId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     - DELETE /api/shopping-list/{shoppingListId}/{requestId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter shoppingListId: (path)  
     - parameter requestId: (path)  
     - returns: RequestBuilder<ShoppingList> 
     */
    open class func shoppingListControllerDeleteRequestFromListWithRequestBuilder(shoppingListId: Int, requestId: Int) -> RequestBuilder<ShoppingList> {
        var path = "/api/shopping-list/{shoppingListId}/{requestId}"
        let shoppingListIdPreEscape = "\(APIHelper.mapValueToPathItem(shoppingListId))"
        let shoppingListIdPostEscape = shoppingListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{shoppingListId}", with: shoppingListIdPostEscape, options: .literal, range: nil)
        let requestIdPreEscape = "\(APIHelper.mapValueToPathItem(requestId))"
        let requestIdPostEscape = requestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{requestId}", with: requestIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ShoppingList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<ShoppingList>
     */
    open class func shoppingListControllerFindOne(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<ShoppingList> {
        return Observable.create { observer -> Disposable in
            shoppingListControllerFindOneWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     - GET /api/shopping-list/{id}
     - BASIC:
       - type: http
       - name: bearer
     - parameter id: (path)  
     - returns: RequestBuilder<ShoppingList> 
     */
    open class func shoppingListControllerFindOneWithRequestBuilder(id: Int) -> RequestBuilder<ShoppingList> {
        var path = "/api/shopping-list/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ShoppingList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<[ShoppingList]>
     */
    open class func shoppingListControllerGetUserLists(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<[ShoppingList]> {
        return Observable.create { observer -> Disposable in
            shoppingListControllerGetUserListsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     - GET /api/shopping-list
     - BASIC:
       - type: http
       - name: bearer
     - returns: RequestBuilder<[ShoppingList]> 
     */
    open class func shoppingListControllerGetUserListsWithRequestBuilder() -> RequestBuilder<[ShoppingList]> {
        let path = "/api/shopping-list"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ShoppingList]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter shoppingListFormDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<ShoppingList>
     */
    open class func shoppingListControllerInsertNewShoppingList(shoppingListFormDto: ShoppingListFormDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<ShoppingList> {
        return Observable.create { observer -> Disposable in
            shoppingListControllerInsertNewShoppingListWithRequestBuilder(shoppingListFormDto: shoppingListFormDto).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     - POST /api/shopping-list
     - BASIC:
       - type: http
       - name: bearer
     - parameter shoppingListFormDto: (body)  
     - returns: RequestBuilder<ShoppingList> 
     */
    open class func shoppingListControllerInsertNewShoppingListWithRequestBuilder(shoppingListFormDto: ShoppingListFormDto) -> RequestBuilder<ShoppingList> {
        let path = "/api/shopping-list"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shoppingListFormDto)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ShoppingList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter shoppingListFormDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<ShoppingList>
     */
    open class func shoppingListControllerUpdateShoppingList(id: Int, shoppingListFormDto: ShoppingListFormDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<ShoppingList> {
        return Observable.create { observer -> Disposable in
            shoppingListControllerUpdateShoppingListWithRequestBuilder(id: id, shoppingListFormDto: shoppingListFormDto).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     - PUT /api/shopping-list/{id}
     - BASIC:
       - type: http
       - name: bearer
     - parameter id: (path)  
     - parameter shoppingListFormDto: (body)  
     - returns: RequestBuilder<ShoppingList> 
     */
    open class func shoppingListControllerUpdateShoppingListWithRequestBuilder(id: Int, shoppingListFormDto: ShoppingListFormDto) -> RequestBuilder<ShoppingList> {
        var path = "/api/shopping-list/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shoppingListFormDto)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ShoppingList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
