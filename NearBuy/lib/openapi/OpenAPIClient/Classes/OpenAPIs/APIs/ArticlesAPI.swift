//
// ArticlesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import RxSwift



open class ArticlesAPI {
    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<[Article]>
     */
    open class func articlesControllerFindAll(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<[Article]> {
        return Observable.create { observer -> Disposable in
            articlesControllerFindAllWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     - GET /api/articles
     - returns: RequestBuilder<[Article]> 
     */
    open class func articlesControllerFindAllWithRequestBuilder() -> RequestBuilder<[Article]> {
        let path = "/api/articles"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Article]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter createArticleDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Article>
     */
    open class func articlesControllerInsertOne(createArticleDto: CreateArticleDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<Article> {
        return Observable.create { observer -> Disposable in
            articlesControllerInsertOneWithRequestBuilder(createArticleDto: createArticleDto).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     - POST /api/articles
     - parameter createArticleDto: (body)  
     - returns: RequestBuilder<Article> 
     */
    open class func articlesControllerInsertOneWithRequestBuilder(createArticleDto: CreateArticleDto) -> RequestBuilder<Article> {
        let path = "/api/articles"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createArticleDto)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Article>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
