//
// HelpRequestsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import RxSwift



open class HelpRequestsAPI {
    /**
     Put an article to a help request, endpoint overrides.
     
     - parameter helpRequestId: (path) Id of the help request 
     - parameter articleId: (path) Id of the article 
     - parameter createOrUpdateHelpRequestArticleDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<HelpRequest>
     */
    open class func helpRequestsControllerAddArticleInHelpRequest(helpRequestId: Int64, articleId: Int64, createOrUpdateHelpRequestArticleDto: CreateOrUpdateHelpRequestArticleDto, apiResponseQueue: DispatchQueue = NexdClientAPI.apiResponseQueue) -> Observable<HelpRequest> {
        return Observable.create { observer -> Disposable in
            helpRequestsControllerAddArticleInHelpRequestWithRequestBuilder(helpRequestId: helpRequestId, articleId: articleId, createOrUpdateHelpRequestArticleDto: createOrUpdateHelpRequestArticleDto).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Put an article to a help request, endpoint overrides.
     - PUT /help-requests/{helpRequestId}/article/{articleId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter helpRequestId: (path) Id of the help request 
     - parameter articleId: (path) Id of the article 
     - parameter createOrUpdateHelpRequestArticleDto: (body)  
     - returns: RequestBuilder<HelpRequest> 
     */
    open class func helpRequestsControllerAddArticleInHelpRequestWithRequestBuilder(helpRequestId: Int64, articleId: Int64, createOrUpdateHelpRequestArticleDto: CreateOrUpdateHelpRequestArticleDto) -> RequestBuilder<HelpRequest> {
        var path = "/help-requests/{helpRequestId}/article/{articleId}"
        let helpRequestIdPreEscape = "\(APIHelper.mapValueToPathItem(helpRequestId))"
        let helpRequestIdPostEscape = helpRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{helpRequestId}", with: helpRequestIdPostEscape, options: .literal, range: nil)
        let articleIdPreEscape = "\(APIHelper.mapValueToPathItem(articleId))"
        let articleIdPostEscape = articleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{articleId}", with: articleIdPostEscape, options: .literal, range: nil)
        let URLString = NexdClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createOrUpdateHelpRequestArticleDto)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HelpRequest>.Type = NexdClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get and filter for various help requests
     
     - parameter userId: (query) If included, filter by userId, \&quot;me\&quot; for the requesting user, otherwise all users are replied. The excludeUserId query inverts the logic and excludes the given userId.  (optional)
     - parameter excludeUserId: (query) If true, the given userId (in query) is excluded (and not filtered for as default). Requires the userId query. (optional)
     - parameter zipCode: (query) Filter by an array of zipCodes (optional)
     - parameter includeRequester: (query) If \&quot;true\&quot;, the requester object is included in each help request (optional)
     - parameter status: (query) Array of status to filter for (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<[HelpRequest]>
     */
    open class func helpRequestsControllerGetAll(userId: String? = nil, excludeUserId: Bool? = nil, zipCode: [String]? = nil, includeRequester: Bool? = nil, status: [HelpRequestStatus]? = nil, apiResponseQueue: DispatchQueue = NexdClientAPI.apiResponseQueue) -> Observable<[HelpRequest]> {
        return Observable.create { observer -> Disposable in
            helpRequestsControllerGetAllWithRequestBuilder(userId: userId, excludeUserId: excludeUserId, zipCode: zipCode, includeRequester: includeRequester, status: status).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Get and filter for various help requests
     - GET /help-requests
     - BASIC:
       - type: http
       - name: bearer
     - parameter userId: (query) If included, filter by userId, \&quot;me\&quot; for the requesting user, otherwise all users are replied. The excludeUserId query inverts the logic and excludes the given userId.  (optional)
     - parameter excludeUserId: (query) If true, the given userId (in query) is excluded (and not filtered for as default). Requires the userId query. (optional)
     - parameter zipCode: (query) Filter by an array of zipCodes (optional)
     - parameter includeRequester: (query) If \&quot;true\&quot;, the requester object is included in each help request (optional)
     - parameter status: (query) Array of status to filter for (optional)
     - returns: RequestBuilder<[HelpRequest]> 
     */
    open class func helpRequestsControllerGetAllWithRequestBuilder(userId: String? = nil, excludeUserId: Bool? = nil, zipCode: [String]? = nil, includeRequester: Bool? = nil, status: [HelpRequestStatus]? = nil) -> RequestBuilder<[HelpRequest]> {
        let path = "/help-requests"
        let URLString = NexdClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId?.encodeToJSON(), 
            "excludeUserId": excludeUserId?.encodeToJSON(), 
            "zipCode": zipCode?.encodeToJSON(), 
            "includeRequester": includeRequester?.encodeToJSON(), 
            "status": status?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[HelpRequest]>.Type = NexdClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single help request by id
     
     - parameter helpRequestId: (path) Id of the help request 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<HelpRequest>
     */
    open class func helpRequestsControllerGetSingleRequest(helpRequestId: Int64, apiResponseQueue: DispatchQueue = NexdClientAPI.apiResponseQueue) -> Observable<HelpRequest> {
        return Observable.create { observer -> Disposable in
            helpRequestsControllerGetSingleRequestWithRequestBuilder(helpRequestId: helpRequestId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Get a single help request by id
     - GET /help-requests/{helpRequestId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter helpRequestId: (path) Id of the help request 
     - returns: RequestBuilder<HelpRequest> 
     */
    open class func helpRequestsControllerGetSingleRequestWithRequestBuilder(helpRequestId: Int64) -> RequestBuilder<HelpRequest> {
        var path = "/help-requests/{helpRequestId}"
        let helpRequestIdPreEscape = "\(APIHelper.mapValueToPathItem(helpRequestId))"
        let helpRequestIdPostEscape = helpRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{helpRequestId}", with: helpRequestIdPostEscape, options: .literal, range: nil)
        let URLString = NexdClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HelpRequest>.Type = NexdClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add a help request
     
     - parameter helpRequestCreateDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<HelpRequest>
     */
    open class func helpRequestsControllerInsertRequestWithArticles(helpRequestCreateDto: HelpRequestCreateDto, apiResponseQueue: DispatchQueue = NexdClientAPI.apiResponseQueue) -> Observable<HelpRequest> {
        return Observable.create { observer -> Disposable in
            helpRequestsControllerInsertRequestWithArticlesWithRequestBuilder(helpRequestCreateDto: helpRequestCreateDto).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Add a help request
     - POST /help-requests
     - BASIC:
       - type: http
       - name: bearer
     - parameter helpRequestCreateDto: (body)  
     - returns: RequestBuilder<HelpRequest> 
     */
    open class func helpRequestsControllerInsertRequestWithArticlesWithRequestBuilder(helpRequestCreateDto: HelpRequestCreateDto) -> RequestBuilder<HelpRequest> {
        let path = "/help-requests"
        let URLString = NexdClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: helpRequestCreateDto)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HelpRequest>.Type = NexdClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove an article from a help request
     
     - parameter helpRequestId: (path) Id of the help request 
     - parameter articleId: (path) Id of the article 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<HelpRequest>
     */
    open class func helpRequestsControllerRemoveArticleInHelpRequest(helpRequestId: Int64, articleId: Int64, apiResponseQueue: DispatchQueue = NexdClientAPI.apiResponseQueue) -> Observable<HelpRequest> {
        return Observable.create { observer -> Disposable in
            helpRequestsControllerRemoveArticleInHelpRequestWithRequestBuilder(helpRequestId: helpRequestId, articleId: articleId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Remove an article from a help request
     - DELETE /help-requests/{helpRequestId}/article/{articleId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter helpRequestId: (path) Id of the help request 
     - parameter articleId: (path) Id of the article 
     - returns: RequestBuilder<HelpRequest> 
     */
    open class func helpRequestsControllerRemoveArticleInHelpRequestWithRequestBuilder(helpRequestId: Int64, articleId: Int64) -> RequestBuilder<HelpRequest> {
        var path = "/help-requests/{helpRequestId}/article/{articleId}"
        let helpRequestIdPreEscape = "\(APIHelper.mapValueToPathItem(helpRequestId))"
        let helpRequestIdPostEscape = helpRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{helpRequestId}", with: helpRequestIdPostEscape, options: .literal, range: nil)
        let articleIdPreEscape = "\(APIHelper.mapValueToPathItem(articleId))"
        let articleIdPostEscape = articleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{articleId}", with: articleIdPostEscape, options: .literal, range: nil)
        let URLString = NexdClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HelpRequest>.Type = NexdClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Modify a help request (e.g. address or articles)
     
     - parameter helpRequestId: (path) Id of the help request 
     - parameter helpRequestCreateDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<HelpRequest>
     */
    open class func helpRequestsControllerUpdateRequest(helpRequestId: Int64, helpRequestCreateDto: HelpRequestCreateDto, apiResponseQueue: DispatchQueue = NexdClientAPI.apiResponseQueue) -> Observable<HelpRequest> {
        return Observable.create { observer -> Disposable in
            helpRequestsControllerUpdateRequestWithRequestBuilder(helpRequestId: helpRequestId, helpRequestCreateDto: helpRequestCreateDto).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Modify a help request (e.g. address or articles)
     - PUT /help-requests/{helpRequestId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter helpRequestId: (path) Id of the help request 
     - parameter helpRequestCreateDto: (body)  
     - returns: RequestBuilder<HelpRequest> 
     */
    open class func helpRequestsControllerUpdateRequestWithRequestBuilder(helpRequestId: Int64, helpRequestCreateDto: HelpRequestCreateDto) -> RequestBuilder<HelpRequest> {
        var path = "/help-requests/{helpRequestId}"
        let helpRequestIdPreEscape = "\(APIHelper.mapValueToPathItem(helpRequestId))"
        let helpRequestIdPostEscape = helpRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{helpRequestId}", with: helpRequestIdPostEscape, options: .literal, range: nil)
        let URLString = NexdClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: helpRequestCreateDto)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HelpRequest>.Type = NexdClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
