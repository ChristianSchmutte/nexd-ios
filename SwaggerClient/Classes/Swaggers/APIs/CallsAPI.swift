//
// CallsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift


open class CallsAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callControllerIndex(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        callControllerIndexWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - returns: Observable<Void>
     */
    open class func callControllerIndex() -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            callControllerIndex() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /api/call
     - 


     - returns: RequestBuilder<Void> 
     */
    open class func callControllerIndexWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/call"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callControllerListen(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        callControllerListenWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - returns: Observable<Void>
     */
    open class func callControllerListen() -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            callControllerListen() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /api/call/listen
     - 


     - returns: RequestBuilder<Void> 
     */
    open class func callControllerListenWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/call/listen"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callControllerWebhook(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        callControllerWebhookWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - returns: Observable<Void>
     */
    open class func callControllerWebhook() -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            callControllerWebhook() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /api/call/webhook
     - 


     - returns: RequestBuilder<Void> 
     */
    open class func callControllerWebhookWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/call/webhook"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
