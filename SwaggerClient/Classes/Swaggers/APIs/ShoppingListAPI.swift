//
// ShoppingListAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift


open class ShoppingListAPI {
    /**

     - parameter _id: (path)  
     - parameter requestId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func shoppingListControllerAddRequestToList(_id: Int, requestId: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        shoppingListControllerAddRequestToListWithRequestBuilder(_id: _id, requestId: requestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - parameter _id: (path)  
     - parameter requestId: (path)  
     - returns: Observable<Void>
     */
    open class func shoppingListControllerAddRequestToList(_id: Int, requestId: Int) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            shoppingListControllerAddRequestToList(_id: _id, requestId: requestId) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - PUT /api/shopping-list/{id}/{requestId}
     - 

     - :
       - type: http
       - name: bearer
     - parameter _id: (path)  
     - parameter requestId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func shoppingListControllerAddRequestToListWithRequestBuilder(_id: Int, requestId: Int) -> RequestBuilder<Void> {
        var path = "/api/shopping-list/{id}/{requestId}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let requestIdPreEscape = "\(requestId)"
        let requestIdPostEscape = requestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{requestId}", with: requestIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func shoppingListControllerFindOne(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        shoppingListControllerFindOneWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - parameter _id: (path)  
     - returns: Observable<Void>
     */
    open class func shoppingListControllerFindOne(_id: Int) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            shoppingListControllerFindOne(_id: _id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /api/shopping-list/{id}
     - 

     - :
       - type: http
       - name: bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func shoppingListControllerFindOneWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/api/shopping-list/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func shoppingListControllerGetUserLists(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        shoppingListControllerGetUserListsWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - returns: Observable<Void>
     */
    open class func shoppingListControllerGetUserLists() -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            shoppingListControllerGetUserLists() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /api/shopping-list
     - 

     - :
       - type: http
       - name: bearer

     - returns: RequestBuilder<Void> 
     */
    open class func shoppingListControllerGetUserListsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/shopping-list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func shoppingListControllerInsertNewShoppingList(body: ShoppingListFormDto, completion: @escaping ((_ data: ShoppingList?,_ error: Error?) -> Void)) {
        shoppingListControllerInsertNewShoppingListWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - parameter body: (body)  
     - returns: Observable<ShoppingList>
     */
    open class func shoppingListControllerInsertNewShoppingList(body: ShoppingListFormDto) -> Observable<ShoppingList> {
        return Observable.create { observer -> Disposable in
            shoppingListControllerInsertNewShoppingList(body: body) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - POST /api/shopping-list
     - 

     - :
       - type: http
       - name: bearer
     - examples: [{contentType=application/json, example={
  "owner" : 6.027456183070403,
  "id" : 0.8008281904610115,
  "requests" : [ { }, { } ],
  "status" : "status"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<ShoppingList> 
     */
    open class func shoppingListControllerInsertNewShoppingListWithRequestBuilder(body: ShoppingListFormDto) -> RequestBuilder<ShoppingList> {
        let path = "/api/shopping-list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ShoppingList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter body: (body)  
     - parameter _id: (path)  
     - parameter requestId: (path)  
     - parameter articleId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func shoppingListControllerMarkArticleAsDone(body: RequestArticleStatusDto, _id: Int, requestId: Int, articleId: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        shoppingListControllerMarkArticleAsDoneWithRequestBuilder(body: body, _id: _id, requestId: requestId, articleId: articleId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - parameter body: (body)  
     - parameter _id: (path)  
     - parameter requestId: (path)  
     - parameter articleId: (path)  
     - returns: Observable<Void>
     */
    open class func shoppingListControllerMarkArticleAsDone(body: RequestArticleStatusDto, _id: Int, requestId: Int, articleId: Int) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            shoppingListControllerMarkArticleAsDone(body: body, _id: _id, requestId: requestId, articleId: articleId) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - PUT /api/shopping-list/{id}/{requestId}/{articleId}
     - 

     - :
       - type: http
       - name: bearer
     - parameter body: (body)  
     - parameter _id: (path)  
     - parameter requestId: (path)  
     - parameter articleId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func shoppingListControllerMarkArticleAsDoneWithRequestBuilder(body: RequestArticleStatusDto, _id: Int, requestId: Int, articleId: Int) -> RequestBuilder<Void> {
        var path = "/api/shopping-list/{id}/{requestId}/{articleId}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let requestIdPreEscape = "\(requestId)"
        let requestIdPostEscape = requestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{requestId}", with: requestIdPostEscape, options: .literal, range: nil)
        let articleIdPreEscape = "\(articleId)"
        let articleIdPostEscape = articleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{articleId}", with: articleIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter body: (body)  
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func shoppingListControllerUpdateShoppingList(body: ShoppingListFormDto, _id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        shoppingListControllerUpdateShoppingListWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - parameter body: (body)  
     - parameter _id: (path)  
     - returns: Observable<Void>
     */
    open class func shoppingListControllerUpdateShoppingList(body: ShoppingListFormDto, _id: Int) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            shoppingListControllerUpdateShoppingList(body: body, _id: _id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - PUT /api/shopping-list/{id}
     - 

     - :
       - type: http
       - name: bearer
     - parameter body: (body)  
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func shoppingListControllerUpdateShoppingListWithRequestBuilder(body: ShoppingListFormDto, _id: Int) -> RequestBuilder<Void> {
        var path = "/api/shopping-list/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
