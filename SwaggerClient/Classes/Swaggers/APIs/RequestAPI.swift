//
// RequestAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift


open class RequestAPI {
    /**

     - parameter onlyMine: (query) if \&quot;true\&quot;, only the requesting user requests will be replied. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func requestControllerGetAll(onlyMine: String? = nil, completion: @escaping ((_ data: [Request]?,_ error: Error?) -> Void)) {
        requestControllerGetAllWithRequestBuilder(onlyMine: onlyMine).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - parameter onlyMine: (query) if \&quot;true\&quot;, only the requesting user requests will be replied. (optional)
     - returns: Observable<[Request]>
     */
    open class func requestControllerGetAll(onlyMine: String? = nil) -> Observable<[Request]> {
        return Observable.create { observer -> Disposable in
            requestControllerGetAll(onlyMine: onlyMine) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /api/request
     - 

     - :
       - type: http
       - name: bearer
     - examples: [{contentType=application/json, example=[ {
  "requester" : 6,
  "zipCode" : "zipCode",
  "address" : "address",
  "phoneNumber" : "phoneNumber",
  "additionalRequest" : "additionalRequest",
  "city" : "city",
  "deliveryComment" : "deliveryComment",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "priority" : "priority",
  "articles" : [ { }, { } ],
  "status" : "status"
}, {
  "requester" : 6,
  "zipCode" : "zipCode",
  "address" : "address",
  "phoneNumber" : "phoneNumber",
  "additionalRequest" : "additionalRequest",
  "city" : "city",
  "deliveryComment" : "deliveryComment",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "priority" : "priority",
  "articles" : [ { }, { } ],
  "status" : "status"
} ]}]
     - parameter onlyMine: (query) if \&quot;true\&quot;, only the requesting user requests will be replied. (optional)

     - returns: RequestBuilder<[Request]> 
     */
    open class func requestControllerGetAllWithRequestBuilder(onlyMine: String? = nil) -> RequestBuilder<[Request]> {
        let path = "/api/request"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "onlyMine": onlyMine
        ])

        let requestBuilder: RequestBuilder<[Request]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func requestControllerInsertRequestWithArticles(body: CreateRequestDto, completion: @escaping ((_ data: Request?,_ error: Error?) -> Void)) {
        requestControllerInsertRequestWithArticlesWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - parameter body: (body)  
     - returns: Observable<Request>
     */
    open class func requestControllerInsertRequestWithArticles(body: CreateRequestDto) -> Observable<Request> {
        return Observable.create { observer -> Disposable in
            requestControllerInsertRequestWithArticles(body: body) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - POST /api/request
     - 

     - :
       - type: http
       - name: bearer
     - examples: [{contentType=application/json, example={
  "requester" : 6,
  "zipCode" : "zipCode",
  "address" : "address",
  "phoneNumber" : "phoneNumber",
  "additionalRequest" : "additionalRequest",
  "city" : "city",
  "deliveryComment" : "deliveryComment",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "priority" : "priority",
  "articles" : [ { }, { } ],
  "status" : "status"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<Request> 
     */
    open class func requestControllerInsertRequestWithArticlesWithRequestBuilder(body: CreateRequestDto) -> RequestBuilder<Request> {
        let path = "/api/request"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Request>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
