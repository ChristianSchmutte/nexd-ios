//
// ArticlesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift


open class ArticlesAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func articlesControllerFindAll(completion: @escaping ((_ data: [Article]?,_ error: Error?) -> Void)) {
        articlesControllerFindAllWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - returns: Observable<[Article]>
     */
    open class func articlesControllerFindAll() -> Observable<[Article]> {
        return Observable.create { observer -> Disposable in
            articlesControllerFindAll() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /api/articles
     - 

     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "id" : 0
}, {
  "name" : "name",
  "id" : 0
} ]}]

     - returns: RequestBuilder<[Article]> 
     */
    open class func articlesControllerFindAllWithRequestBuilder() -> RequestBuilder<[Article]> {
        let path = "/api/articles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Article]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func articlesControllerInsertOne(body: CreateArticleDto, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        articlesControllerInsertOneWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func articlesControllerInsertOne(body: CreateArticleDto) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            articlesControllerInsertOne(body: body) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - POST /api/articles
     - 

     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func articlesControllerInsertOneWithRequestBuilder(body: CreateArticleDto) -> RequestBuilder<Void> {
        let path = "/api/articles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
