//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `cymbal.wav`.
    static let cymbalWav = Rswift.FileResource(bundle: R.hostingBundle, name: "cymbal", pathExtension: "wav")

    /// `bundle.url(forResource: "cymbal", withExtension: "wav")`
    static func cymbalWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cymbalWav
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 17 images.
  struct image {
    /// Image `baseline_account_box_black_18pt`.
    static let baseline_account_box_black_18pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_account_box_black_18pt")
    /// Image `baseline_account_box_black_24pt`.
    static let baseline_account_box_black_24pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_account_box_black_24pt")
    /// Image `baseline_account_box_black_36pt`.
    static let baseline_account_box_black_36pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_account_box_black_36pt")
    /// Image `baseline_account_box_black_48pt`.
    static let baseline_account_box_black_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_account_box_black_48pt")
    /// Image `baseline_check_black_48pt`.
    static let baseline_check_black_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_check_black_48pt")
    /// Image `baseline_error_black_18pt`.
    static let baseline_error_black_18pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_error_black_18pt")
    /// Image `baseline_shopping_basket_black_48pt`.
    static let baseline_shopping_basket_black_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_shopping_basket_black_48pt")
    /// Image `baseline_warning_black_18pt`.
    static let baseline_warning_black_18pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_warning_black_18pt")
    /// Image `gradient`.
    static let gradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "gradient")
    /// Image `icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `nexd`.
    static let nexd = Rswift.ImageResource(bundle: R.hostingBundle, name: "nexd")
    /// Image `outline_account_box_black_48pt`.
    static let outline_account_box_black_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "outline_account_box_black_48pt")
    /// Image `outline_directions_walk_black_48pt`.
    static let outline_directions_walk_black_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "outline_directions_walk_black_48pt")
    /// Image `outline_shopping_cart_black_48pt`.
    static let outline_shopping_cart_black_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "outline_shopping_cart_black_48pt")
    /// Image `round_pause_black_36pt`.
    static let round_pause_black_36pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "round_pause_black_36pt")
    /// Image `round_play_arrow_black_36pt`.
    static let round_play_arrow_black_36pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "round_play_arrow_black_36pt")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_account_box_black_18pt", bundle: ..., traitCollection: ...)`
    static func baseline_account_box_black_18pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_account_box_black_18pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_account_box_black_24pt", bundle: ..., traitCollection: ...)`
    static func baseline_account_box_black_24pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_account_box_black_24pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_account_box_black_36pt", bundle: ..., traitCollection: ...)`
    static func baseline_account_box_black_36pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_account_box_black_36pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_account_box_black_48pt", bundle: ..., traitCollection: ...)`
    static func baseline_account_box_black_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_account_box_black_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_check_black_48pt", bundle: ..., traitCollection: ...)`
    static func baseline_check_black_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_check_black_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_error_black_18pt", bundle: ..., traitCollection: ...)`
    static func baseline_error_black_18pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_error_black_18pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_shopping_basket_black_48pt", bundle: ..., traitCollection: ...)`
    static func baseline_shopping_basket_black_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_shopping_basket_black_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_warning_black_18pt", bundle: ..., traitCollection: ...)`
    static func baseline_warning_black_18pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_warning_black_18pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gradient", bundle: ..., traitCollection: ...)`
    static func gradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gradient, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nexd", bundle: ..., traitCollection: ...)`
    static func nexd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nexd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "outline_account_box_black_48pt", bundle: ..., traitCollection: ...)`
    static func outline_account_box_black_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outline_account_box_black_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "outline_directions_walk_black_48pt", bundle: ..., traitCollection: ...)`
    static func outline_directions_walk_black_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outline_directions_walk_black_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "outline_shopping_cart_black_48pt", bundle: ..., traitCollection: ...)`
    static func outline_shopping_cart_black_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outline_shopping_cart_black_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "round_pause_black_36pt", bundle: ..., traitCollection: ...)`
    static func round_pause_black_36pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.round_pause_black_36pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "round_play_arrow_black_36pt", bundle: ..., traitCollection: ...)`
    static func round_play_arrow_black_36pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.round_play_arrow_black_36pt, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 87 localization keys.
    struct localizable {
      /// en translation: - unknown -
      ///
      /// Locales: en, de
      static let helper_request_overview_unknown_requester = Rswift.StringResource(key: "helper_request_overview_unknown_requester", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Abort
      ///
      /// Locales: en, de
      static let dialog_button_abort = Rswift.StringResource(key: "dialog_button_abort", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Accepted requests:
      ///
      /// Locales: en, de
      static let helper_request_overview_heading_accepted_section = Rswift.StringResource(key: "helper_request_overview_heading_accepted_section", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Additional information
      ///
      /// Locales: en, de
      static let seeker_detail_placeholder_information = Rswift.StringResource(key: "seeker_detail_placeholder_information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Additional information
      ///
      /// Locales: en, de
      static let seeker_request_create_placeholder_information = Rswift.StringResource(key: "seeker_request_create_placeholder_information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Address: 
      ///
      /// Locales: en, de
      static let delivery_request_address = Rswift.StringResource(key: "delivery_request_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: At least 6 characters
      ///
      /// Locales: en, de
      static let error_message_registration_password_too_short = Rswift.StringResource(key: "error_message_registration_password_too_short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Available requests:
      ///
      /// Locales: en, de
      static let helper_request_overview_heading_available_section = Rswift.StringResource(key: "helper_request_overview_heading_available_section", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: By creating an account, I agree to Nexd's %1$@
      ///
      /// Locales: en, de
      static let registration_label_privacy_policy_agreement = Rswift.StringResource(key: "registration_label_privacy_policy_agreement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Checkout
      ///
      /// Locales: en, de
      static let checkout_screen_title = Rswift.StringResource(key: "checkout_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Checkout
      ///
      /// Locales: en, de
      static let shopping_list_button_title_checkout = Rswift.StringResource(key: "shopping_list_button_title_checkout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Chose items
      ///
      /// Locales: en, de
      static let seeker_item_selection_screen_title = Rswift.StringResource(key: "seeker_item_selection_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Complete
      ///
      /// Locales: en, de
      static let checkout_button_title_complete = Rswift.StringResource(key: "checkout_button_title_complete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, de
      static let delivery_dialog_delivery_button_confirm = Rswift.StringResource(key: "delivery_dialog_delivery_button_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, de
      static let dialog_button_confirm = Rswift.StringResource(key: "dialog_button_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, de
      static let user_input_details_confirm = Rswift.StringResource(key: "user_input_details_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Confirm password
      ///
      /// Locales: en, de
      static let registration_placeholder_confirm_password = Rswift.StringResource(key: "registration_placeholder_confirm_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Confirm password
      ///
      /// Locales: en, de
      static let registration_placeholer_confirm_password = Rswift.StringResource(key: "registration_placeholer_confirm_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Confirm the delivery of all accepted requests
      ///
      /// Locales: en, de
      static let delivery_dialog_deliver_description = Rswift.StringResource(key: "delivery_dialog_deliver_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en, de
      static let registration_button_title_continue = Rswift.StringResource(key: "registration_button_title_continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Deliver
      ///
      /// Locales: en, de
      static let delivery_dialog_deliver_title = Rswift.StringResource(key: "delivery_dialog_deliver_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Delivery!
      ///
      /// Locales: en, de
      static let delivery_screen_title = Rswift.StringResource(key: "delivery_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Done!
      ///
      /// Locales: en, de
      static let seeker_success_title = Rswift.StringResource(key: "seeker_success_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: E-Mail
      ///
      /// Locales: en, de
      static let registration_placeholer_email = Rswift.StringResource(key: "registration_placeholer_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: E-mail
      ///
      /// Locales: en, de
      static let registration_placeholder_email = Rswift.StringResource(key: "registration_placeholder_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en, de
      static let error_title = Rswift.StringResource(key: "error_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Error!
      ///
      /// Locales: en, de
      static let helper_request_overview_error_title = Rswift.StringResource(key: "helper_request_overview_error_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Error!
      ///
      /// Locales: en, de
      static let seeker_error_title = Rswift.StringResource(key: "seeker_error_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Error!
      ///
      /// Locales: en, de
      static let shopping_list_overview_error_title = Rswift.StringResource(key: "shopping_list_overview_error_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: First name
      ///
      /// Locales: en, de
      static let registration_placeholder_firstName = Rswift.StringResource(key: "registration_placeholder_firstName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: First name
      ///
      /// Locales: en, de
      static let registration_placeholer_firstname = Rswift.StringResource(key: "registration_placeholer_firstname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: I can help
      ///
      /// Locales: en, de
      static let role_selection_helper = Rswift.StringResource(key: "role_selection_helper", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: I need something
      ///
      /// Locales: en, de
      static let role_selection_seeker = Rswift.StringResource(key: "role_selection_seeker", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: I need:
      ///
      /// Locales: en, de
      static let seeker_request_create_heading = Rswift.StringResource(key: "seeker_request_create_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Input further information
      ///
      /// Locales: en, de
      static let user_input_details_screen_title = Rswift.StringResource(key: "user_input_details_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Invalid E-mail address
      ///
      /// Locales: en, de
      static let error_message_registration_invalid_email = Rswift.StringResource(key: "error_message_registration_invalid_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Last name
      ///
      /// Locales: en, de
      static let registration_placeholder_lastName = Rswift.StringResource(key: "registration_placeholder_lastName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Last name
      ///
      /// Locales: en, de
      static let registration_placeholer_lastname = Rswift.StringResource(key: "registration_placeholer_lastname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Log out
      ///
      /// Locales: en, de
      static let role_selection_button_logout = Rswift.StringResource(key: "role_selection_button_logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, de
      static let login_button_title_login = Rswift.StringResource(key: "login_button_title_login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, de
      static let login_screen_title = Rswift.StringResource(key: "login_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Login failed. Please try again.
      ///
      /// Locales: en, de
      static let error_message_login_failed = Rswift.StringResource(key: "error_message_login_failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en, de
      static let user_profile_button_title_logout = Rswift.StringResource(key: "user_profile_button_title_logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: No.
      ///
      /// Locales: en, de
      static let user_input_details_placeholder_houseNumber = Rswift.StringResource(key: "user_input_details_placeholder_houseNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, de
      static let error_button_ok = Rswift.StringResource(key: "error_button_ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Overview
      ///
      /// Locales: en, de
      static let helper_request_overview_screen_title = Rswift.StringResource(key: "helper_request_overview_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, de
      static let login_placeholder_password = Rswift.StringResource(key: "login_placeholder_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, de
      static let login_placeholer_password = Rswift.StringResource(key: "login_placeholer_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, de
      static let registration_placeholder_password = Rswift.StringResource(key: "registration_placeholder_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, de
      static let registration_placeholer_password = Rswift.StringResource(key: "registration_placeholer_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Passwords dont match
      ///
      /// Locales: en, de
      static let error_message_registration_password_match = Rswift.StringResource(key: "error_message_registration_password_match", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Phone
      ///
      /// Locales: en, de
      static let registration_placeholder_phone = Rswift.StringResource(key: "registration_placeholder_phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Phone
      ///
      /// Locales: en, de
      static let registration_placeholer_phone = Rswift.StringResource(key: "registration_placeholer_phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Place
      ///
      /// Locales: en, de
      static let user_input_details_placeholder_city = Rswift.StringResource(key: "user_input_details_placeholder_city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Please fill in
      ///
      /// Locales: en, de
      static let error_message_login_field_missing = Rswift.StringResource(key: "error_message_login_field_missing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Please fill in
      ///
      /// Locales: en, de
      static let error_message_registration_field_missing = Rswift.StringResource(key: "error_message_registration_field_missing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Please fill in
      ///
      /// Locales: en, de
      static let error_message_user_detail_field_missing = Rswift.StringResource(key: "error_message_user_detail_field_missing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, de
      static let registration_button_privacy_policy = Rswift.StringResource(key: "registration_button_privacy_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, de
      static let registration_term_privacy_policy = Rswift.StringResource(key: "registration_term_privacy_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Register
      ///
      /// Locales: en, de
      static let login_button_title_register = Rswift.StringResource(key: "login_button_title_register", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Request already accepted
      ///
      /// Locales: en, de
      static let helper_request_detail_button_accepted = Rswift.StringResource(key: "helper_request_detail_button_accepted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Role
      ///
      /// Locales: en, de
      static let role_selection_screen_title = Rswift.StringResource(key: "role_selection_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, de
      static let registration_button_title_send = Rswift.StringResource(key: "registration_button_title_send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Shopping
      ///
      /// Locales: en, de
      static let helper_request_overview_button_summary_title = Rswift.StringResource(key: "helper_request_overview_button_summary_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Shopping list
      ///
      /// Locales: en, de
      static let shopping_list_screen_title = Rswift.StringResource(key: "shopping_list_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Shopping list could not be loaded. Please try again!
      ///
      /// Locales: en, de
      static let shopping_list_overview_error_loading_failed_message = Rswift.StringResource(key: "shopping_list_overview_error_loading_failed_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Sign-up
      ///
      /// Locales: en, de
      static let registration_screen_title = Rswift.StringResource(key: "registration_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en, de
      static let helper_request_overview_button_title_start = Rswift.StringResource(key: "helper_request_overview_button_title_start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Street
      ///
      /// Locales: en, de
      static let user_input_details_placeholder_street = Rswift.StringResource(key: "user_input_details_placeholder_street", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en, de
      static let seeker_submit_button_title = Rswift.StringResource(key: "seeker_submit_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Tel.
      ///
      /// Locales: en, de
      static let user_input_details_placeholder_phoneNumber = Rswift.StringResource(key: "user_input_details_placeholder_phoneNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Tel.: 
      ///
      /// Locales: en, de
      static let delivery_request_phoneNumber = Rswift.StringResource(key: "delivery_request_phoneNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: To collect
      ///
      /// Locales: en, de
      static let helper_request_detail_screen_title = Rswift.StringResource(key: "helper_request_detail_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Total 
      ///
      /// Locales: en, de
      static let helper_request_overview_button_summary_details = Rswift.StringResource(key: "helper_request_overview_button_summary_details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: User profile
      ///
      /// Locales: en, de
      static let user_profile_screen_title = Rswift.StringResource(key: "user_profile_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: User registration failed. Please make sure you input valid data.
      ///
      /// Locales: en, de
      static let error_message_registration_validation_failed = Rswift.StringResource(key: "error_message_registration_validation_failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: User registration failed. Please try again.
      ///
      /// Locales: en, de
      static let error_message_registration_failed = Rswift.StringResource(key: "error_message_registration_failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Username
      ///
      /// Locales: en, de
      static let login_placeholder_username = Rswift.StringResource(key: "login_placeholder_username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Username
      ///
      /// Locales: en, de
      static let login_placeholer_username = Rswift.StringResource(key: "login_placeholer_username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Will do!
      ///
      /// Locales: en, de
      static let helper_request_detail_button_accept = Rswift.StringResource(key: "helper_request_detail_button_accept", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Your request
      ///
      /// Locales: en, de
      static let seeker_detail_screen_title = Rswift.StringResource(key: "seeker_detail_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Your request could not be sent! Please try again.
      ///
      /// Locales: en, de
      static let helper_request_overview_error_message = Rswift.StringResource(key: "helper_request_overview_error_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Your request could not be sent! Please try again.
      ///
      /// Locales: en, de
      static let seeker_error_message = Rswift.StringResource(key: "seeker_error_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Your request was sent successfully.
      ///
      /// Locales: en, de
      static let seeker_success_message = Rswift.StringResource(key: "seeker_success_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: ZIP code
      ///
      /// Locales: en, de
      static let registration_placeholder_zip = Rswift.StringResource(key: "registration_placeholder_zip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: ZIP code
      ///
      /// Locales: en, de
      static let registration_placeholer_zip = Rswift.StringResource(key: "registration_placeholer_zip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Zip code
      ///
      /// Locales: en, de
      static let user_input_details_placeholder_zipCode = Rswift.StringResource(key: "user_input_details_placeholder_zipCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)

      /// en translation: - unknown -
      ///
      /// Locales: en, de
      static func helper_request_overview_unknown_requester(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_unknown_requester", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_unknown_requester"
        }

        return NSLocalizedString("helper_request_overview_unknown_requester", bundle: bundle, comment: "")
      }

      /// en translation: Abort
      ///
      /// Locales: en, de
      static func dialog_button_abort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dialog_button_abort", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_button_abort"
        }

        return NSLocalizedString("dialog_button_abort", bundle: bundle, comment: "")
      }

      /// en translation: Accepted requests:
      ///
      /// Locales: en, de
      static func helper_request_overview_heading_accepted_section(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_heading_accepted_section", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_heading_accepted_section"
        }

        return NSLocalizedString("helper_request_overview_heading_accepted_section", bundle: bundle, comment: "")
      }

      /// en translation: Additional information
      ///
      /// Locales: en, de
      static func seeker_detail_placeholder_information(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_detail_placeholder_information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_detail_placeholder_information"
        }

        return NSLocalizedString("seeker_detail_placeholder_information", bundle: bundle, comment: "")
      }

      /// en translation: Additional information
      ///
      /// Locales: en, de
      static func seeker_request_create_placeholder_information(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_request_create_placeholder_information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_request_create_placeholder_information"
        }

        return NSLocalizedString("seeker_request_create_placeholder_information", bundle: bundle, comment: "")
      }

      /// en translation: Address: 
      ///
      /// Locales: en, de
      static func delivery_request_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_request_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_request_address"
        }

        return NSLocalizedString("delivery_request_address", bundle: bundle, comment: "")
      }

      /// en translation: At least 6 characters
      ///
      /// Locales: en, de
      static func error_message_registration_password_too_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_registration_password_too_short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_registration_password_too_short"
        }

        return NSLocalizedString("error_message_registration_password_too_short", bundle: bundle, comment: "")
      }

      /// en translation: Available requests:
      ///
      /// Locales: en, de
      static func helper_request_overview_heading_available_section(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_heading_available_section", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_heading_available_section"
        }

        return NSLocalizedString("helper_request_overview_heading_available_section", bundle: bundle, comment: "")
      }

      /// en translation: By creating an account, I agree to Nexd's %1$@
      ///
      /// Locales: en, de
      static func registration_label_privacy_policy_agreement(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("registration_label_privacy_policy_agreement", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_label_privacy_policy_agreement"
        }

        let format = NSLocalizedString("registration_label_privacy_policy_agreement", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Checkout
      ///
      /// Locales: en, de
      static func checkout_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("checkout_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "checkout_screen_title"
        }

        return NSLocalizedString("checkout_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Checkout
      ///
      /// Locales: en, de
      static func shopping_list_button_title_checkout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shopping_list_button_title_checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shopping_list_button_title_checkout"
        }

        return NSLocalizedString("shopping_list_button_title_checkout", bundle: bundle, comment: "")
      }

      /// en translation: Chose items
      ///
      /// Locales: en, de
      static func seeker_item_selection_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_item_selection_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_item_selection_screen_title"
        }

        return NSLocalizedString("seeker_item_selection_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Complete
      ///
      /// Locales: en, de
      static func checkout_button_title_complete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("checkout_button_title_complete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "checkout_button_title_complete"
        }

        return NSLocalizedString("checkout_button_title_complete", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, de
      static func delivery_dialog_delivery_button_confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_dialog_delivery_button_confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_dialog_delivery_button_confirm"
        }

        return NSLocalizedString("delivery_dialog_delivery_button_confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, de
      static func dialog_button_confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dialog_button_confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_button_confirm"
        }

        return NSLocalizedString("dialog_button_confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, de
      static func user_input_details_confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_input_details_confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_input_details_confirm"
        }

        return NSLocalizedString("user_input_details_confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirm password
      ///
      /// Locales: en, de
      static func registration_placeholder_confirm_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholder_confirm_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholder_confirm_password"
        }

        return NSLocalizedString("registration_placeholder_confirm_password", bundle: bundle, comment: "")
      }

      /// en translation: Confirm password
      ///
      /// Locales: en, de
      static func registration_placeholer_confirm_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholer_confirm_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholer_confirm_password"
        }

        return NSLocalizedString("registration_placeholer_confirm_password", bundle: bundle, comment: "")
      }

      /// en translation: Confirm the delivery of all accepted requests
      ///
      /// Locales: en, de
      static func delivery_dialog_deliver_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_dialog_deliver_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_dialog_deliver_description"
        }

        return NSLocalizedString("delivery_dialog_deliver_description", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en, de
      static func registration_button_title_continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_button_title_continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_button_title_continue"
        }

        return NSLocalizedString("registration_button_title_continue", bundle: bundle, comment: "")
      }

      /// en translation: Deliver
      ///
      /// Locales: en, de
      static func delivery_dialog_deliver_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_dialog_deliver_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_dialog_deliver_title"
        }

        return NSLocalizedString("delivery_dialog_deliver_title", bundle: bundle, comment: "")
      }

      /// en translation: Delivery!
      ///
      /// Locales: en, de
      static func delivery_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_screen_title"
        }

        return NSLocalizedString("delivery_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Done!
      ///
      /// Locales: en, de
      static func seeker_success_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_success_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_success_title"
        }

        return NSLocalizedString("seeker_success_title", bundle: bundle, comment: "")
      }

      /// en translation: E-Mail
      ///
      /// Locales: en, de
      static func registration_placeholer_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholer_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholer_email"
        }

        return NSLocalizedString("registration_placeholer_email", bundle: bundle, comment: "")
      }

      /// en translation: E-mail
      ///
      /// Locales: en, de
      static func registration_placeholder_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholder_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholder_email"
        }

        return NSLocalizedString("registration_placeholder_email", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en, de
      static func error_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_title"
        }

        return NSLocalizedString("error_title", bundle: bundle, comment: "")
      }

      /// en translation: Error!
      ///
      /// Locales: en, de
      static func helper_request_overview_error_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_error_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_error_title"
        }

        return NSLocalizedString("helper_request_overview_error_title", bundle: bundle, comment: "")
      }

      /// en translation: Error!
      ///
      /// Locales: en, de
      static func seeker_error_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_error_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_error_title"
        }

        return NSLocalizedString("seeker_error_title", bundle: bundle, comment: "")
      }

      /// en translation: Error!
      ///
      /// Locales: en, de
      static func shopping_list_overview_error_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shopping_list_overview_error_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shopping_list_overview_error_title"
        }

        return NSLocalizedString("shopping_list_overview_error_title", bundle: bundle, comment: "")
      }

      /// en translation: First name
      ///
      /// Locales: en, de
      static func registration_placeholder_firstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholder_firstName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholder_firstName"
        }

        return NSLocalizedString("registration_placeholder_firstName", bundle: bundle, comment: "")
      }

      /// en translation: First name
      ///
      /// Locales: en, de
      static func registration_placeholer_firstname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholer_firstname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholer_firstname"
        }

        return NSLocalizedString("registration_placeholer_firstname", bundle: bundle, comment: "")
      }

      /// en translation: I can help
      ///
      /// Locales: en, de
      static func role_selection_helper(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("role_selection_helper", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "role_selection_helper"
        }

        return NSLocalizedString("role_selection_helper", bundle: bundle, comment: "")
      }

      /// en translation: I need something
      ///
      /// Locales: en, de
      static func role_selection_seeker(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("role_selection_seeker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "role_selection_seeker"
        }

        return NSLocalizedString("role_selection_seeker", bundle: bundle, comment: "")
      }

      /// en translation: I need:
      ///
      /// Locales: en, de
      static func seeker_request_create_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_request_create_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_request_create_heading"
        }

        return NSLocalizedString("seeker_request_create_heading", bundle: bundle, comment: "")
      }

      /// en translation: Input further information
      ///
      /// Locales: en, de
      static func user_input_details_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_input_details_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_input_details_screen_title"
        }

        return NSLocalizedString("user_input_details_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Invalid E-mail address
      ///
      /// Locales: en, de
      static func error_message_registration_invalid_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_registration_invalid_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_registration_invalid_email"
        }

        return NSLocalizedString("error_message_registration_invalid_email", bundle: bundle, comment: "")
      }

      /// en translation: Last name
      ///
      /// Locales: en, de
      static func registration_placeholder_lastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholder_lastName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholder_lastName"
        }

        return NSLocalizedString("registration_placeholder_lastName", bundle: bundle, comment: "")
      }

      /// en translation: Last name
      ///
      /// Locales: en, de
      static func registration_placeholer_lastname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholer_lastname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholer_lastname"
        }

        return NSLocalizedString("registration_placeholer_lastname", bundle: bundle, comment: "")
      }

      /// en translation: Log out
      ///
      /// Locales: en, de
      static func role_selection_button_logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("role_selection_button_logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "role_selection_button_logout"
        }

        return NSLocalizedString("role_selection_button_logout", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, de
      static func login_button_title_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_button_title_login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_button_title_login"
        }

        return NSLocalizedString("login_button_title_login", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, de
      static func login_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_screen_title"
        }

        return NSLocalizedString("login_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Login failed. Please try again.
      ///
      /// Locales: en, de
      static func error_message_login_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_login_failed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_login_failed"
        }

        return NSLocalizedString("error_message_login_failed", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en, de
      static func user_profile_button_title_logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_profile_button_title_logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_profile_button_title_logout"
        }

        return NSLocalizedString("user_profile_button_title_logout", bundle: bundle, comment: "")
      }

      /// en translation: No.
      ///
      /// Locales: en, de
      static func user_input_details_placeholder_houseNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_input_details_placeholder_houseNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_input_details_placeholder_houseNumber"
        }

        return NSLocalizedString("user_input_details_placeholder_houseNumber", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, de
      static func error_button_ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_button_ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_button_ok"
        }

        return NSLocalizedString("error_button_ok", bundle: bundle, comment: "")
      }

      /// en translation: Overview
      ///
      /// Locales: en, de
      static func helper_request_overview_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_screen_title"
        }

        return NSLocalizedString("helper_request_overview_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, de
      static func login_placeholder_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_placeholder_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_placeholder_password"
        }

        return NSLocalizedString("login_placeholder_password", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, de
      static func login_placeholer_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_placeholer_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_placeholer_password"
        }

        return NSLocalizedString("login_placeholer_password", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, de
      static func registration_placeholder_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholder_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholder_password"
        }

        return NSLocalizedString("registration_placeholder_password", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, de
      static func registration_placeholer_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholer_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholer_password"
        }

        return NSLocalizedString("registration_placeholer_password", bundle: bundle, comment: "")
      }

      /// en translation: Passwords dont match
      ///
      /// Locales: en, de
      static func error_message_registration_password_match(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_registration_password_match", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_registration_password_match"
        }

        return NSLocalizedString("error_message_registration_password_match", bundle: bundle, comment: "")
      }

      /// en translation: Phone
      ///
      /// Locales: en, de
      static func registration_placeholder_phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholder_phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholder_phone"
        }

        return NSLocalizedString("registration_placeholder_phone", bundle: bundle, comment: "")
      }

      /// en translation: Phone
      ///
      /// Locales: en, de
      static func registration_placeholer_phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholer_phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholer_phone"
        }

        return NSLocalizedString("registration_placeholer_phone", bundle: bundle, comment: "")
      }

      /// en translation: Place
      ///
      /// Locales: en, de
      static func user_input_details_placeholder_city(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_input_details_placeholder_city", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_input_details_placeholder_city"
        }

        return NSLocalizedString("user_input_details_placeholder_city", bundle: bundle, comment: "")
      }

      /// en translation: Please fill in
      ///
      /// Locales: en, de
      static func error_message_login_field_missing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_login_field_missing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_login_field_missing"
        }

        return NSLocalizedString("error_message_login_field_missing", bundle: bundle, comment: "")
      }

      /// en translation: Please fill in
      ///
      /// Locales: en, de
      static func error_message_registration_field_missing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_registration_field_missing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_registration_field_missing"
        }

        return NSLocalizedString("error_message_registration_field_missing", bundle: bundle, comment: "")
      }

      /// en translation: Please fill in
      ///
      /// Locales: en, de
      static func error_message_user_detail_field_missing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_user_detail_field_missing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_user_detail_field_missing"
        }

        return NSLocalizedString("error_message_user_detail_field_missing", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, de
      static func registration_button_privacy_policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_button_privacy_policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_button_privacy_policy"
        }

        return NSLocalizedString("registration_button_privacy_policy", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, de
      static func registration_term_privacy_policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_term_privacy_policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_term_privacy_policy"
        }

        return NSLocalizedString("registration_term_privacy_policy", bundle: bundle, comment: "")
      }

      /// en translation: Register
      ///
      /// Locales: en, de
      static func login_button_title_register(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_button_title_register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_button_title_register"
        }

        return NSLocalizedString("login_button_title_register", bundle: bundle, comment: "")
      }

      /// en translation: Request already accepted
      ///
      /// Locales: en, de
      static func helper_request_detail_button_accepted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_detail_button_accepted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_detail_button_accepted"
        }

        return NSLocalizedString("helper_request_detail_button_accepted", bundle: bundle, comment: "")
      }

      /// en translation: Role
      ///
      /// Locales: en, de
      static func role_selection_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("role_selection_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "role_selection_screen_title"
        }

        return NSLocalizedString("role_selection_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, de
      static func registration_button_title_send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_button_title_send", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_button_title_send"
        }

        return NSLocalizedString("registration_button_title_send", bundle: bundle, comment: "")
      }

      /// en translation: Shopping
      ///
      /// Locales: en, de
      static func helper_request_overview_button_summary_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_button_summary_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_button_summary_title"
        }

        return NSLocalizedString("helper_request_overview_button_summary_title", bundle: bundle, comment: "")
      }

      /// en translation: Shopping list
      ///
      /// Locales: en, de
      static func shopping_list_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shopping_list_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shopping_list_screen_title"
        }

        return NSLocalizedString("shopping_list_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Shopping list could not be loaded. Please try again!
      ///
      /// Locales: en, de
      static func shopping_list_overview_error_loading_failed_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shopping_list_overview_error_loading_failed_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shopping_list_overview_error_loading_failed_message"
        }

        return NSLocalizedString("shopping_list_overview_error_loading_failed_message", bundle: bundle, comment: "")
      }

      /// en translation: Sign-up
      ///
      /// Locales: en, de
      static func registration_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_screen_title"
        }

        return NSLocalizedString("registration_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en, de
      static func helper_request_overview_button_title_start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_button_title_start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_button_title_start"
        }

        return NSLocalizedString("helper_request_overview_button_title_start", bundle: bundle, comment: "")
      }

      /// en translation: Street
      ///
      /// Locales: en, de
      static func user_input_details_placeholder_street(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_input_details_placeholder_street", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_input_details_placeholder_street"
        }

        return NSLocalizedString("user_input_details_placeholder_street", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en, de
      static func seeker_submit_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_submit_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_submit_button_title"
        }

        return NSLocalizedString("seeker_submit_button_title", bundle: bundle, comment: "")
      }

      /// en translation: Tel.
      ///
      /// Locales: en, de
      static func user_input_details_placeholder_phoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_input_details_placeholder_phoneNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_input_details_placeholder_phoneNumber"
        }

        return NSLocalizedString("user_input_details_placeholder_phoneNumber", bundle: bundle, comment: "")
      }

      /// en translation: Tel.: 
      ///
      /// Locales: en, de
      static func delivery_request_phoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_request_phoneNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_request_phoneNumber"
        }

        return NSLocalizedString("delivery_request_phoneNumber", bundle: bundle, comment: "")
      }

      /// en translation: To collect
      ///
      /// Locales: en, de
      static func helper_request_detail_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_detail_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_detail_screen_title"
        }

        return NSLocalizedString("helper_request_detail_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Total 
      ///
      /// Locales: en, de
      static func helper_request_overview_button_summary_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_button_summary_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_button_summary_details"
        }

        return NSLocalizedString("helper_request_overview_button_summary_details", bundle: bundle, comment: "")
      }

      /// en translation: User profile
      ///
      /// Locales: en, de
      static func user_profile_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_profile_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_profile_screen_title"
        }

        return NSLocalizedString("user_profile_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: User registration failed. Please make sure you input valid data.
      ///
      /// Locales: en, de
      static func error_message_registration_validation_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_registration_validation_failed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_registration_validation_failed"
        }

        return NSLocalizedString("error_message_registration_validation_failed", bundle: bundle, comment: "")
      }

      /// en translation: User registration failed. Please try again.
      ///
      /// Locales: en, de
      static func error_message_registration_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_registration_failed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_registration_failed"
        }

        return NSLocalizedString("error_message_registration_failed", bundle: bundle, comment: "")
      }

      /// en translation: Username
      ///
      /// Locales: en, de
      static func login_placeholder_username(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_placeholder_username", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_placeholder_username"
        }

        return NSLocalizedString("login_placeholder_username", bundle: bundle, comment: "")
      }

      /// en translation: Username
      ///
      /// Locales: en, de
      static func login_placeholer_username(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_placeholer_username", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_placeholer_username"
        }

        return NSLocalizedString("login_placeholer_username", bundle: bundle, comment: "")
      }

      /// en translation: Will do!
      ///
      /// Locales: en, de
      static func helper_request_detail_button_accept(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_detail_button_accept", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_detail_button_accept"
        }

        return NSLocalizedString("helper_request_detail_button_accept", bundle: bundle, comment: "")
      }

      /// en translation: Your request
      ///
      /// Locales: en, de
      static func seeker_detail_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_detail_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_detail_screen_title"
        }

        return NSLocalizedString("seeker_detail_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Your request could not be sent! Please try again.
      ///
      /// Locales: en, de
      static func helper_request_overview_error_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_error_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_error_message"
        }

        return NSLocalizedString("helper_request_overview_error_message", bundle: bundle, comment: "")
      }

      /// en translation: Your request could not be sent! Please try again.
      ///
      /// Locales: en, de
      static func seeker_error_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_error_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_error_message"
        }

        return NSLocalizedString("seeker_error_message", bundle: bundle, comment: "")
      }

      /// en translation: Your request was sent successfully.
      ///
      /// Locales: en, de
      static func seeker_success_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_success_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_success_message"
        }

        return NSLocalizedString("seeker_success_message", bundle: bundle, comment: "")
      }

      /// en translation: ZIP code
      ///
      /// Locales: en, de
      static func registration_placeholder_zip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholder_zip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholder_zip"
        }

        return NSLocalizedString("registration_placeholder_zip", bundle: bundle, comment: "")
      }

      /// en translation: ZIP code
      ///
      /// Locales: en, de
      static func registration_placeholer_zip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholer_zip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholer_zip"
        }

        return NSLocalizedString("registration_placeholer_zip", bundle: bundle, comment: "")
      }

      /// en translation: Zip code
      ///
      /// Locales: en, de
      static func user_input_details_placeholder_zipCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_input_details_placeholder_zipCode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_input_details_placeholder_zipCode"
        }

        return NSLocalizedString("user_input_details_placeholder_zipCode", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "gradient", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gradient' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
